"""
Django settings for Site project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from sql_server import pyodbc

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'whe!0mj9r_0t8sl*9+lsg+s3y$(ym2*+h!o$4r6q)8g)arn90u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.PublicZone',
    'apps.authentication',
    'apps.dashboard',
    'apps.chat',
    'helpdesk',
    'django.contrib.sites',
    'django.contrib.humanize',
    'bootstrap4form',
    'bootstrap4',
    "pinax.templates",
    'apps.API',
    'apps.csa'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '_Site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '_Site.wsgi.application'
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'mssql_Vehicles': {
        'NAME': 'support',
        'ENGINE': 'sql_server.pyodbc',
        'HOST': 'chertovMSSQL\\SQLEXPRESS',
        'USER': 'csa_system',
        'PASSWORD': 'q1w2e3w2e3',
        'PORT': '6001',
        'OPTIONS': {
            # 'driver': 'FreeTDS',
            # 'driver': 'SQL Server Native Client 11.0',
            'driver': 'ODBC Driver 17 for SQL Server',
        },
    },
# tsql -H <chertovMSSQL\\SQLEXPRESS> -p <6002> -U <avm> -P <q1w2e3w2e3>
    # 'work': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': 'django_db',
    #     'USER' : 'user_name',
    #     'PASSWORD' : 'password',
    #     'HOST' : '127.0.0.1',
    #     'PORT' : '5432',
    # }
}
# DATABASE_CONNECTION_POOLING = False
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_URL = '/static/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = os.path.join(BASE_DIR, 'static/')
# static root needs to be defined in order to use collectstatic
# STATIC_ROOT = os.path.join(BASE_DIR, '/static/')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/"),
    # '/opt/www/HDeskServ/static/',
]

# MEDIA_ROOT is where media uploads are stored.
# We set this to a directory to host file attachments createpython manage.py collectstaticd
# with tickets.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Fixtures
# https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-FIXTURE_DIRS
# - This is only necessary to make the demo project work, not needed for
# your own projects unless you make your own fixtures
FIXTURE_DIRS = [os.path.join(BASE_DIR, 'fixtures/')]

isLoadsLocalSettings = True
isLoadsAppsSettings = True

ALLOW_SELF_REGISTRATION = False

if isLoadsLocalSettings:
    try:
        from .local_settings import *

        print('Local settings detected, load ...')
        isLoadsLocalSettings = False
    except ImportError:
        print('Local settings is not detected, load def settings ...')
        pass

if isLoadsAppsSettings:
    try:
        from .settingsApps import *

        print('Settings apps detected, load ...')
        isLoadsAppsSettings = False

    except ImportError:
        print('Settings apps is not detected ...')
        pass
